example-title,posix shell,powershell,cmd.exe
,,,
comparison,,,
,,,
wikipedia,,,
,,,
branches,,,
sub-communities,,,
environments,,,
,,,
repo-issues,,,
reddit,,,
forum,,,
documentation,,,
documentation2,,,
wiki,,,
SO,,,
,,,
rosettacode,,,
cheatsheet,,,
symbol index,,,
,,,
,,,
see also,,,
categories,,,
,,,
,,,
,,,
,,,
,,,
,,,
,,,
,,,
,,,
requirements url,,,
"requirements, tested",,,
,,,
,,,
,,,
"installation, beginner",,,
"installation, non-beginner",,,
installation test,,,
,,,
,,,
,,,
,,,
,,,
,,,
,,,
,,,
,,,
,,,
,,,
,,,
,,,
version used,*dash; POSIX 2008*,*4.0*,*6.3*
show version,,$host.version,*displayed at startup*
,,,
,,,
grammar and execution,,,
,posix shell,powershell,cmd.exe
,,,
interpreter,$ dash foo.sh,"PS> .\foo.ps1

DOS> powershell -file foo.ps1","*when foo.bat is in the search path:*
> foo"
repl,$ dash,> powershell,> cmd
execute command and exit,$ dash -c 'echo hi',"> powershell -command 'write-output ""hi""'","> cmd /c ""echo hi"""
statement separator,"*pipelines separated by*
; & && ||

*lists of pipelines separated by newlines unless newline is preceded by a 
backslash or inside these characters:*
"""" '' `` ()","; *or newline; a newline can be escaped with a backtick:*`*newlines are 
permitted in double quotes and after a pipe:* |","*pipelines separated by* & && ||

*lists of pipelines separated by newline unless preceded by caret ^ which 
is not inside double quote ""*"
word separators,| & ; ( ) < > *space tab*,,| & < > *space tab*
escape special character,"# write ""foo"" to foo.txt:
echo foo > foo.txt

# write ""foo > foo.txt"" to stdout:
echo foo \> foo.txt",,"rem write ""foo"" to foo.txt
echo foo > foo.txt

rem write ""foo > foo.txt"" to stdout:
echo foo ^> foo.txt"
block delimiters,"{*…*}
(*…*)
do *…* done",{ *…* },( *…* )
are expressions statements,*no*,*yes*,"*no relational expressions can only be used in the conditional of an* if 

*statement arithmetic expressions can only be assigned to a variable using* 
set /a"
end-of-line comment,# *comment*,# *comment*,"rem *comment*

:: *comment*"
comment out multiple lines,"<<EOF
*comment*
*another comment*
EOF","<# *comment*
*another comment* #>","goto comment
*comment*
*another comment*
:comment"
variables and expressions,,,
,posix shell,powershell,cmd.exe
assignment,"a=1
*whitespace next to* = *not permitted*",$a = 1,set a=1
parallel assignment,*none*,"$a, $b = 1, 2",*none*
swap,"tmp=$a
a=$b
b=$tmp","$a, $b = $b, $a","set tmp=%a%
set a=%b%
set b=%tmp%"
"compound assignment operators: arithmetic, string, bit",*none*,"+= -= *= /= %=
+= *=
*none*","+= -= *= /= %=
*none*
«= »= &= |= ^="
increment and decrement,*none*,"$x = 1
$x++
$x--",*none*
variable declaration,"*assignment*, export, readonly",*assignment*,*assignment*
are identifiers case sensitive?,*yes*,*no*,*no*
null,',$null,"*Variables must contain a non-empty string. This deletes the variable x:*
set x="
null test,"if [ -z $v ]
then
  echo not defined
fi",$v -eq $null,if not defined v echo not defined
arithmetic and logic,,,
,posix shell,powershell,cmd.exe
true and false,"*status codes:*
true false

*inside* [ ]:
1 ''",$true $false,"*no booleans; conditional of if statement must contain a relational 
expression*"
falsehoods,"*status codes: nonzero integers*

*inside* [ ]:
''","0 0.0 """" ''",*relational expressions which evaluate to false*
logical operators,"*status codes:*
&& || !

*inside* [ ]:
-a -o !",-and -or -not,"*short-circuit operators:*
&& ||

*inside conditional of if:*
not"
conditional expression,$(( x>0 ? x : -x )),*none*,*none*
relational expression,[ $a -gt 3 ],$a -gt 3,%a% gtr 3
relational operators,"*integers:*
-eq -ne -gt -lt -ge -le

*strings:*
= != > < *none**none*",-eq -ne -gt -lt -ge -le,equ neq gtr lss geq leq
arithmetic expression,$(( 1 + 3 )),1 + 3,"*arithmetic expression must be stored in a variable:*
set /a ""foo=1+3"""
arithmetic operators,"+ - * *none* / % **

*operators are integer-only in most shells; use* bc *for float arithmetic*",+ - * / *??* % *??*,"+ - * *none* / % *none*

*operators only work on integers*"
integer division,$(( $a / $b )),"$rem = $null
$quot = [Math]::DivRem($a, $b, [ref] $rem)","set /a ""result=7/3"""
integer division by zero,"*writes ""division by 0"" error message; statement terminates with a 1 status*",*error: Attempted to divide by zero*,"*Writes ""Divide by zero error."" and sets %errorlevel% to nonzero value.*"
float division,"`echo "" scale=5; $a / $b "" | bc`",$a / $b,*none*
float division by zero,"*writes ""division by 0"" error message; statement terminates with a 1 status*",*evaluates to* Infinity *which is not a float literal*,*none*
power,,"[Math]::pow(2, 32)",*none*
sqrt,,[Math]::sqrt(2),*none*
sqrt -2,*no sqrt*,*evaluates to* NaN *which is not a float literal*,*none*
transcendental functions,"e l s c *none**none**none* a *none*
*how to use:*
`echo 'e(2)' | bc -l`","[Math]::exp [Math]::log
[Math]::sin [Math]::cos [Math]::tan
[Math]::asin [Math]::acos [Math]::atan
[Math]::atan2",*none*
"float truncation
*round towards zero, round to nearest integer, round down, round up*",*none and no floats*,"[Math]::truncate(3.14)
[Math]::round(3.14)
[Math]::floor(3.14)
[Math]::ceiling(3.14)",*none*
"absolute value
*and signum*",,"[Math]::abs(-7)
[Math]::sign(-7)",*none*
integer overflow,*modular arithmetic*,*converts to float*,"*sometimes modular arithmetic; sometimes writes error message and sets 
%errorlevel% to nonzero value.*"
float overflow,*no floats*,*evaluates to* Infinity *which is not a float literal*,*none*
"random integer, uniform float",echo $RANDOM *15 bit integer*,"random 100
random 1.0","rem integer in range 0 to 32767:
echo %random%"
seed random numbers,"RANDOM=17
r=$RANDOM",$r = random -setseed 17,*none*
bit operators,<< >> & | ^ ~,"*none**none* -band -bor -bxor -bnot

# powershell 3.0:
-lsl -lsr","*use with* set /a:
<< >> & | ^ ~"
strings,,,
,posix shell,powershell,cmd.exe
string literal,"don'\''t say ""no""'
""don't say \""no\""""
$'don\'t say ""no""'","don''t say ""no""'
""don't say `""no`""""","*None; barewords are used for strings.*

*Double quotes are used for file names which contain spaces and other 
special characters. However, the double quotes are stored in the variables 
and passed to commands.*"
newline in literal,*yes*,*yes*,"*No; a bareword string can be continued on the following line by ending a 
line with ^; the CRLF is not part of the value of the string; it is not 
possible to store a CRLF in a variable.*"
barewords,*yes*,*yes*,*yes*
bareword escape character,*backslash:* \;,*backquote:*: `$,"*caret:* ^<

*Characters special to the interpreter can be stored in a variable by 
preceding them by a caret: ^; the interpreter will attempt to interpret 
them when the variable is dereferenced, however.*"
escapes,"gray|*in double quotes*##
\\ \""
*in* $' ' *quotes:*
\a \b \e \f \n \r \t \v \\ \' \c*c* \x*hh* \*ooo*","`' `"" ``
`0 `a `b `f `n `r `t `v
*in other backtick sequences the backtick is ignored*",
variable interpolation,"count=3
item=ball
""$count ${item}s""","$count = 3
$item = ""ball""
""$count $($item)s""",
length,"s=""hello""
${#s}","$s = ""hello""
$s.length",*see footnote*
string comparison,"[ $USER = foo ]
[ $USER != foo ]","# case insensitive:
-eq -ne -gt -lt -ge -le

# case sensitive:
-ceq -cne -cgt -clt -cge -cle",
index of substring,*none*,"*returns -1 if not found:*
""foo bar"".indexof(""bar"")",
extract substring,"s=""foo bar""
${s:4:3}","""foo bar"".substring(4, 3)","set s=foo bar
echo %s:~4:3%"
string concatenation,"c=""hello, """"world""","$c = ""hello, "" + ""world""","rem trailing whitespace is stored:
set part1=hello, 
set part2=world
echo %part1%%part2%"
string replication,,"$hbar = ""-"" * 80",
split,*none*,"""foo,bar,baz"" -split "",""",
join,*none*,"@(""foo"",""bar"",""baz"") -join "",""",
sprintf,"`printf ""tie: %s %d %f"" ""Spain"" 13 3.7`","$a = ""Spain"", 13, 3.7
""tie: {0} {1} {2}"" -f $a",
case manipulation,"echo ""hello"" | tr [a-z] [A-Z]
echo ""HELLO"" | tr [A-Z] [a-z]
A=hello
echo -n ${A:0:1} | tr [a-z] [A-Z]; echo -n ${A:1}","""hello"".toupper()
""HELLO"".tolower()",
strip,*none*,""" hello "".trim()",
"pad on right, pad on left","`printf ""%-10s"" ""hello""`
`printf ""%10s"" ""hello""`","$s = ""hello""
$s + "" "" * (10 - $s.length)
"" "" * (10 - $s.length) + $s",
string to number,"A=""12""
$(( 7 + $A ))

B="".037""
`echo 73.9 + $B | bc`","7 + ""12""

73.9 + "".037""","set x=""12""
set /a ""result=7+%x%"""
number to string,*all values are strings*,"[convert]::tostring(7) + "" items""

# or use variable interpolation",*all values are strings*
regular expressions,,,
,posix shell,powershell,cmd.exe
regex match,"s=hello
rx='[a-z][a-z]*'
if expr $s : $rx > /dev/null
then
  *…*
fi","if (""hello"" -match ""^[a-z][a-z]*$"") {
  *…*
}","set s=hello
echo %s%|findstr /r ""[a-z][a-z]*"" && (echo match ) ^
  || (echo does not match)"
single substitution,"s='do re mi mi mi'
s=$(echo $s | sed s/mi/ma/)",,
global substitution,"s='do re mi mi mi'
s=$(echo $s | sed s/mi/ma/g)","$s = ""do re mi mi mi""
$s = $s -replace ""mi"", ""ma""","set ""s=do re mi mi mi""
echo %s:mi=ma%"
dates and time,,,
,posix shell,powershell,cmd.exe
current datetime,date +'%Y-%m-%d %H:%M:%S',"get-date -format 'yyyy-MM-dd HH:mm:ss'
get-date -uformat '%Y-%m-%d %H:%M:%S'",date /t && time /t
current unix epoch,date +'%s',get-date -uformat %s,
format datetime,date -d '1970-01-01 00:00:00 UTC' +'%s',get-date -date '1970-01-01 00:00:00' -uformat %s,
arrays,,,
,posix shell,powershell,cmd.exe
literal,nums=(1 2 3 4),"$nums = 1 ,2 ,3, 4
$nums = @(1 ,2, 3, 4)",set nums=(1 2 3 4)
size,${#nums[@]},$nums.Length,"set numsc=0
for %i in %nums% do set /a numsc+=1
echo %numsc%"
lookup,${nums[0]},$nums[0],
update,nums[1]=5,$nums[0] = 5,
slice,${nums[@]:1:2},$nums[1..2],
concatenate,"a=(1 2 3)
b=(4 5 6)
c=(${a[@]} ${b[@]})","@(1, 2, 3) + @(4, 5, 6)",
iterate over elements,"for i in ${nums[@]}
do echo $i
done","foreach ($i in $nums) {
  write-output $i
}",
sort,,"$a = 3, 2, 4, 1
$b = $a | Sort-Object",
reverse,,"$a = 1, 2, 3
[array]::reverse($a)",
functions,,,
,posix shell,powershell,cmd.exe
define,"add() { echo $(( $1 + $2 )); }
*or*
function add { echo $(( $1 + $2 )); }","function add {
  param ($a, $b)
  $a + $b
}","goto:eof
:add
  set /a sum=%~1+%~2
  echo %sum%
goto:eof"
call,add 1 2,add 1 2,call:add 1 2
missing argument behavior,',$null,*parameter treated as undefined variable or as containing the empty string*
extra argument behavior,*ignored*,*ignored*,*none*
default argument,*none*,"function add {
  param ($a=0, $b=0)
  $a + $b
}",*none*
named parameters,*none*,add -a 1 -b 2,*none*
return value,"return *arg available in* $? *variable if a positive integer smaller than 
256*",,
anonymous function literal,*none*,"$f = { write-output ""foo"" }",*none*
call anonymous function,*none*,"& $f
*or*
$x.invoke()",*none*
default scope,*global*,*local*,*global*
nest,*Nested function visible outside containing function.*,"function add {
  param ($a, $b)
  function add2 {
    param ($a2, $b2)
    $a2 + $b2
  }
  add2 $a $b
}

# Nested function not visible outside of containing
# function; nested function can see local variables
# of containing function.",*none*
execution control,,,
,posix shell,powershell,cmd.exe
if,"if [ $n -eq 0 ]
then
  echo ""no hits""
elif [ $n -eq 1 ]
then
  echo ""1 hit""
else
  echo $n "" hits""
fi","if ($n -eq 0) {
  write-output ""no hits""
} elseif ($n -eq 1) {
  write-output ""one hit""
} else {
  write-output ""$n hits""
}","if %n% equ 0 (
  echo no hits
) else (
  if %n% equ 1 (
    echo one hit
  ) else (
    echo %n% hits
  )
)"
while,"i=0
while [ $i -lt 10 ]
do i=$(($i + 1))
  echo $i
done","$i = 0
while ($i -lt 10) {
  write-output (++$i)
}","set i=0
:loop
  set /a i+=1
  echo %i%
if %i% lss 10 goto :loop"
for,"for i in 1 2 3
do
  echo $i
done","for ($i=1; $i -le 3; $i++) {
  write-output $i
}","set nums=(1 2 3 4)
for %%n in %nums% do echo %%n"
break,break,break,
continue,continue,continue,
exceptions,,,
,posix shell,powershell,cmd.exe
raise,"*Commands which fail return nonzero exit status. Exit status of last 
command stored in $?*","throw ""bam!""","*Commands which fail return nonzero exit status. Exit status of last 
command stored in %errorlevel%*"
handle,"trap 'echo ""risky failed""' ERR
risky","try {
  throw ""bam!""
}
catch {
  write-output ""caught!""
}","risky

if errorlevel 1 (
  echo risky failed
)"
uncaught exception behavior,*stderr and continue*,*script exits*,*stderr and continue*
concurrency,,,
,posix shell,powershell,cmd.exe
sleep,sleep 10,timeout 10,"*vista and later:*
timeout 10"
streams,,,
,posix shell,powershell,cmd.exe
read line from stdin,"# stored in $ine:
read line

# with prompt:
read -p 'line: ' line","$line = read-host

# with prompt:
$line = read-host 'line'","rem stored in %line%:
set /p line=

rem with prompt:
set /p line=""line: """
write line to stdout,"echo ""hi world""","write-output ""hi world""",echo hi world
write formatted string to stdout,printf '%.2f\n' 3.1415,,
write file to stdout,cat foo.txt,,
write to standard error,"echo ""hi world"" >&2",,echo hi world >&2
iterate over file by line,awk 'length($0) > 70 {print $0}' /etc/passwd,,
write to process,"echo ""hi world"" | wc",,echo hi world | find /c hi
write to file,"echo ""hello"" > /tmp/a",,echo hello > \tmp\a
append to file,"echo ""hello"" >> /tmp/a",,echo hello >> \tmp\a
files,,,
,posix shell,powershell,cmd.exe
create empty file,"# does not overwrite existing file, but updates
# last mod. time:
touch foo.txt","# error if file exists:
new-item -type file foo.txt","rem overwrites existing file:
type nul > foo.txt"
"file exists test, file regular test","if [ -e foo.txt ]; then echo ""exists""; fi
if [ -f foo.txt ]; then echo ""regular""; fi","if (test-path foo.txt) { write-output ""exists"" }

if (test-path -pathtype leaf) {
  write-output ""regular""
}","if exist foo.txt ( echo exists )

*??*"
file size,ls -l foo.txt,get-childitem foo.txt,dir foo.txt
"is readable, is writeable, is executable","if [ -r /etc/passwd ]; then echo readable; fi
if [ -w /tmp ]; then echo writeable; fi
if [ -x /bin/ls ]; then echo executable; fi",,
set file permisions,chmod 0600 foo.txt,,
last modification time,ls -l foo.txt,get-childitem foo.txt,dir foo.txt
"copy file, remove file, rename file","cp /tmp/foo.txt /tmp/bar.txt
rm /tmp/foo.txt
mv /tmp/bar.txt /tmp/foo.txt","copy-item foo.txt bar.txt
remove-item foo.txt
move-item bar.txt foo.txt","copy foo.txt bar.txt
del foo.txt
move bar.txt foo.txt"
"create symlink, symlink test, readlink","ln -s /etc/passwd /tmp/passwd
if [ -h /tmp/passwd ]; then echo ""symlink""; fi
readlink /tmp/passwd",,
generate unused file name,mktemp /tmp/fooXXXXX,[System.IO.Path]::GetTempFileName(),
directories,,,
,posix shell,powershell,cmd.exe
"working directory
*get and set*","echo $(pwd)
echo $PWD

cd /tmp","$loc = get-location
echo $loc

set-location \windows","echo %cd%

chdir \windows"
program directory,"*bash only:*
""$( cd ""$( dirname ""${BASH_SOURCE[0]}"" )"" && pwd )""",,echo %~dp0
dirname and basename,"dirname /etc/hosts
basename /etc/hosts",,
iterate over directory by file,"for f in /etc/*
do
  echo $f
done",,
make directory,mkdir /tmp/foo.d,new-item -type directory foo,mkdir foo
recursive copy,cp -R /tmp/foo.d /tmp/bar.d,,
remove empty directory,rmdir /tmp/foo.d,,rmdir foo
remove directory and contents,rm -rf /tmp/foo.d,,rmdir /s /q foo
directory test,if [ -d /tmp ]; then echo directory; fi,,
processes and environment,,,
,posix shell,powershell,cmd.exe
command line args,"$1
$2
*…*

# number of args:
$#

# pass args as $# words to twiddle
twiddle ""$@""

# pass args as one word to twiddle
twiddle ""$*""",,"%1
%2
*…*

rem number of args:
set #=0
for %%i in %* do set /a #+=1
echo %#%

rem no way to pass argument with space
twiddle %*"
program name,$0,,%0
"environment variable
*get, set, clear*","*shell variables are environment variables*
$HOME",$env:home,
user id and name,"id

# user name only; most systems:
whoami",,
exit,exit 0,exit,"rem batch script exits:
exit /b 0

rem also closes cmd.exe window:
exit 0"
external command,ls,dir,dir
command substitution,s=$(ls),$s=dir,*none*
speech,"*mac only:*
say ""I'm a Mac""","$sp = new-object -comobject ""SAPI.SpVoice""
$sp.speak(""I'm a PC"")",
command path,which ping,get-command ping,
set signal handler,"function int_handler {
  echo ""exiting…"";
  exit
}

trap int_handler INT",,
send signal,"kill -INT 1234
kill -KILL 1234",,
start job in background,sleep 1000 &,,
suspend current job,*^Z*,,
terminate job,kill %1,,
list jobs,jobs,,
background suspended job,bg %1,,
bring background job into foreground,fg %1,,
disown job,disown %1,,
libraries and namespaces,,,
,posix shell,powershell,cmd.exe
library,"$ cat foo.sh
function add() {
  echo $(($1 + $2));
}","*from directory in search path:*

> type Modules\Foo\Foo.psm1
function add {
  param ($a, $b)
  $a + $b
}",
import library,"source foo.sh
add 3 7","import-module foo

add 1 2",
library path environment variable,*none*,$env:psmodulepath,
reflection,,,
,posix shell,powershell,cmd.exe
command line documentation,man ls,get-help get-childitem,help dir
list defined variables,printenv,get-variable,set
list available libraries,,get-module -listavailable,
debugging and profiling,,,
check syntax,"$ apt-get install shellcheck
$ shellcheck foo.sh",,
flags for stronger errors,"*bash only:*
bash -eu -o pipefail

-e: *exit with nonzero status if command fails*
-u: *exit with nonzero status if undefined variable accessed*
-o pipefail: *exit with nonzero status if command in pipeline fails*",,
cpu usage,time ls,,
,posix shell,powershell,cmd.exe
,__________________________________________________________,__________________________________________________________,__________________________________________________________